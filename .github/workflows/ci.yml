name: CI

on:
  pull_request:
    branches:
      - 'master'
    types: [opened, synchronize, reopened, ready_for_review, converted_to_draft]
    paths-ignore:
    - '**.md'
    - 'deploy/**'
    - 'src/migrations/**'

env:
  CTF_CDA_ACCESS_TOKEN: ${{ secrets.CTF_CDA_ACCESS_TOKEN }}
  CTF_ENVIRONMENT_ID: test
  CTF_GRAPHQL_ORIGIN: https://contentful-proxy-cache.test.eanadev.org
  CTF_SPACE_ID: ${{ secrets.CTF_SPACE_ID }}
  DOCKER_REPOSITORY: europeana/portal.js
  ELASTIC_APM_SERVER_URL: https://apm.eanadev.org:8200
  EUROPEANA_API_KEY: ${{ secrets.EUROPEANA_API_KEY }}
  EUROPEANA_RECORD_API_KEY: ${{ secrets.EUROPEANA_RECORD_API_KEY }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  OAUTH_CLIENT: ${{ secrets.OAUTH_CLIENT }}
  PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
  REDIS_URL: ${{ secrets.REDIS_URL }}
  REDIS_TLS_CA: ${{ secrets.REDIS_TLS_CA }}

jobs:
  docker-build-base-image:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REPOSITORY }}
          tags: |
            type=ref,event=pr,suffix=-base
      -
        name: Build and load
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          target: production-app-base
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-unit:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [docker-build-base-image]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REPOSITORY }}
          tags: |
            type=ref,event=pr,suffix=-base
      -
        name: Build and load
        uses: docker/build-push-action@v2
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          target: production-app-base
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - run: |
          docker run --mount type=bind,source="$(pwd)"/tests,target=/app/tests ${{ steps.meta.outputs.tags }} npm run test:unit

  docker-build-push-production-image:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [docker-build-base-image]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REPOSITORY }}
          tags: |
            type=ref,event=pr
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        id: build-push
        uses: docker/build-push-action@v2
        with:
          context: .
          target: production
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  test-size:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [docker-build-push-production-image]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REPOSITORY }}
          tags: |
            type=ref,event=pr
      -
        name: Build and load
        uses: docker/build-push-action@v2
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - run: |
          docker pull europeana/portal.js-test-size
          docker run --name portal.js --rm -d ${{ steps.meta.outputs.tags }}
          docker cp portal.js:/app/.nuxt ./.nuxt
          docker stop portal.js
          docker run \
            --mount type=bind,source="$(pwd)"/.nuxt,target=/app/.nuxt \
            --mount type=bind,source="$(pwd)"/tests/size/.size-limit.json,target=/app/.size-limit.json \
            europeana/portal.js-test-size

  test-e2e:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [docker-build-push-production-image]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REPOSITORY }}
          tags: |
            type=ref,event=pr
      -
        name: Build and load
        uses: docker/build-push-action@v2
        with:
          context: .
          load: true
          target: production
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - run: echo "APP_IMAGE_VERSION=${{ steps.meta.outputs.version }}" >> $GITHUB_ENV
      - run: envsubst < .github/workflows/support/ci/.env > tests/e2e/docker/app/.env
      - run: envsubst < .github/workflows/support/ci/.env > tests/e2e/docker/nightwatch-visual/.env
      - run: docker-compose -f ./tests/e2e/docker/docker-compose.yml pull -q nginx cache chrome-en nightwatch-features
      - run: docker-compose -f ./tests/e2e/docker/docker-compose.yml run --rm nightwatch-features

  test-visual:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [docker-build-push-production-image, test-e2e]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REPOSITORY }}
          tags: |
            type=ref,event=pr
      -
        name: Build and load
        uses: docker/build-push-action@v2
        with:
          context: .
          load: true
          target: production
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - run: echo "APP_IMAGE_VERSION=${{ steps.meta.outputs.version }}" >> $GITHUB_ENV
      - run: envsubst < .github/workflows/support/ci/.env > tests/e2e/docker/app/.env
      - run: envsubst < .github/workflows/support/ci/.env > tests/e2e/docker/nightwatch-visual/.env
      - run: docker-compose -f ./tests/e2e/docker/docker-compose.yml pull -q nginx cache chrome-en nightwatch-visual
      - run: docker-compose -f ./tests/e2e/docker/docker-compose.yml run --rm nightwatch-visual

  deploy-ibm-cloud:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [docker-build-push-production-image]
    env:
      IBMCLOUD_API_URL: https://cloud.ibm.com
      IBMCLOUD_API_KEY: ${{ secrets.IBMCLOUD_API_KEY }}
      IBMCLOUD_CLUSTER_NAME: europeana-web
      IBMCLOUD_REGION: eu-de
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      - run: echo "PULL_REQUEST_NUMBER=$(jq .pull_request.number ${GITHUB_EVENT_PATH})" >> $GITHUB_ENV
      - run: echo "DOCKER_IMAGE_TAG=${DOCKER_REPOSITORY}:pr-${PULL_REQUEST_NUMBER}" >> $GITHUB_ENV
      - run: echo "K8S_RESOURCE_NAME=portal-js-pr-${PULL_REQUEST_NUMBER}" >> $GITHUB_ENV
      - run: echo "K8S_INGRESS_HOST=pr-${PULL_REQUEST_NUMBER}.portal-js.dev.eanadev.org" >> $GITHUB_ENV
      -
        name: Create K8s resource manifests
        run: |
          envsubst < .github/workflows/support/ci/deploy/deployment.yml > deployment.yml
          envsubst < .github/workflows/support/ci/deploy/service.yml > service.yml
          envsubst < .github/workflows/support/ci/deploy/ingress.yml > ingress.yml
      -
        name: Install ibmcloud CLI
        run: |
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
          ibmcloud plugin install container-service
      -
        name: Login to IBM Cloud
        run: |
          ibmcloud login -a ${IBMCLOUD_API_URL} -r ${IBMCLOUD_REGION} --apikey ${IBMCLOUD_API_KEY}
          ibmcloud ks cluster config --cluster ${IBMCLOUD_CLUSTER_NAME}
      - name: Detect new deployment
        run: |
          set +e
          kubectl --namespace dev get deployment ${K8S_RESOURCE_NAME}
          if [ $? -eq 1 ]; then K8S_NEW_DEPLOYMENT="true"; else K8S_NEW_DEPLOYMENT="false"; fi
          set -e
          echo K8S_NEW_DEPLOYMENT=${K8S_NEW_DEPLOYMENT} >> $GITHUB_ENV
      -
        name: Deploy to IBM Cloud K8s
        run: |
          kubectl apply -f deployment.yml
          kubectl apply -f service.yml
          kubectl apply -f ingress.yml
          kubectl rollout restart --namespace dev deployment/${K8S_RESOURCE_NAME}
    outputs:
      k8s-ingress-host: ${{ env.K8S_INGRESS_HOST }}
      k8s-new-deployment: ${{ env.K8S_NEW_DEPLOYMENT }}

  notify:
    if: github.event.pull_request.draft == false && needs.deploy-ibm-cloud.outputs.k8s-new-deployment == 'true'
    needs: [deploy-ibm-cloud]
    runs-on: ubuntu-latest
    env:
      PULL_REQUEST_TITLE: ${{ github.event.pull_request.title }}
      PULL_REQUEST_USER_LOGIN: ${{ github.event.pull_request.user.login }}
      PULL_REQUEST_USER_HTML_URL: ${{ github.event.pull_request.user.html_url }}
      K8S_INGRESS_HOST: ${{ needs.deploy-ibm-cloud.outputs.k8s-ingress-host }}
    steps:
      - uses: actions/checkout@v2
      - run: echo "PULL_REQUEST_NUMBER=$(jq .pull_request.number ${GITHUB_EVENT_PATH})" >> $GITHUB_ENV
      - name: Notify Slack
        run: |
          mkdir tmp
          envsubst < .github/workflows/support/ci/slack-notification.json > tmp/slack-notification.json
          curl -d "@tmp/slack-notification.json" -X POST ${SLACK_WEBHOOK_URL}
